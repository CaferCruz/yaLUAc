//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 20 18:49:33 BRST 2016
//----------------------------------------------------
package sintatico;

import java_cup.runtime.*;
import lexico.Yylex;
import java.io.FileInputStream;
import java.io.FileReader;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Tue Dec 20 18:49:33 BRST 2016
 */
public class Parser extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public Parser() {
        super();
    }
    
    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\141\000\002\002\004\000\002\002\004\000\002\002"
        + "\003\000\002\002\003\000\002\002\003\000\002\003\004"
        + "\000\002\003\005\000\002\004\003\000\002\004\003\000"
        + "\002\004\005\000\002\005\005\000\002\005\003\000\002"
        + "\005\005\000\002\005\007\000\002\005\006\000\002\005"
        + "\010\000\002\005\014\000\002\005\011\000\002\005\005"
        + "\000\002\005\006\000\002\005\005\000\002\006\004\000"
        + "\002\006\003\000\002\007\003\000\002\007\003\000\002"
        + "\010\004\000\002\011\003\000\002\011\005\000\002\011"
        + "\005\000\002\012\004\000\002\012\007\000\002\012\003"
        + "\000\002\013\004\000\002\013\003\000\002\014\003\000"
        + "\002\014\005\000\002\015\003\000\002\015\005\000\002"
        + "\016\004\000\002\016\003\000\002\017\003\000\002\017"
        + "\005\000\002\020\003\000\002\020\006\000\002\020\005"
        + "\000\002\021\003\000\002\021\003\000\002\021\003\000"
        + "\002\021\003\000\002\021\003\000\002\021\003\000\002"
        + "\021\003\000\002\021\003\000\002\021\003\000\002\021"
        + "\005\000\002\021\004\000\002\022\004\000\002\022\006"
        + "\000\002\023\005\000\002\023\003\000\002\023\003\000"
        + "\002\024\007\000\002\025\003\000\002\025\003\000\002"
        + "\026\003\000\002\026\005\000\002\026\003\000\002\027"
        + "\005\000\002\027\004\000\002\030\003\000\002\030\005"
        + "\000\002\031\007\000\002\031\005\000\002\031\003\000"
        + "\002\032\003\000\002\032\003\000\002\033\003\000\002"
        + "\033\003\000\002\033\003\000\002\033\003\000\002\033"
        + "\003\000\002\033\003\000\002\033\003\000\002\033\003"
        + "\000\002\033\003\000\002\033\003\000\002\033\003\000"
        + "\002\033\003\000\002\033\003\000\002\033\003\000\002"
        + "\033\003\000\002\034\003\000\002\034\003\000\002\034"
        + "\003\000\002\035\003\000\002\035\003\000\002\036\003"
        + ""});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\260\000\032\007\013\010\012\011\011\013\006\017"
        + "\023\021\017\022\014\023\022\024\024\035\020\064\004"
        + "\065\005\001\002\000\050\002\uffa1\004\uffa1\006\uffa1\007"
        + "\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\015\uffa1\016\uffa1"
        + "\017\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\035\uffa1\036"
        + "\uffa1\064\uffa1\065\uffa1\001\002\000\110\002\uffd7\004\uffd7"
        + "\005\uffd7\006\uffd7\007\uffd7\012\uffd7\014\uffd7\015\uffd7\016"
        + "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\035\uffd7"
        + "\036\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045"
        + "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7"
        + "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\064\uffd7\065"
        + "\uffd7\001\002\000\034\021\040\032\032\033\034\034\046"
        + "\035\020\037\042\041\053\043\047\061\054\062\037\063"
        + "\050\065\005\066\052\001\002\000\016\002\ufffe\006\ufffe"
        + "\012\ufffe\015\ufffe\016\ufffe\064\ufffe\001\002\000\022\002"
        + "\uffff\006\uffff\012\uffff\015\uffff\016\uffff\023\022\024\024"
        + "\064\uffff\001\002\000\032\007\013\010\012\011\011\013"
        + "\006\017\023\021\017\022\014\023\022\024\024\035\020"
        + "\064\004\065\005\001\002\000\034\021\040\032\032\033"
        + "\034\034\046\035\020\037\042\041\053\043\047\061\054"
        + "\062\037\063\050\065\005\066\052\001\002\000\032\007"
        + "\013\010\012\011\011\013\006\017\023\021\017\022\014"
        + "\023\022\024\024\035\020\064\004\065\005\001\002\000"
        + "\006\021\225\065\143\001\002\000\004\002\223\001\002"
        + "\000\016\002\ufffd\006\ufffd\012\ufffd\015\ufffd\016\ufffd\064"
        + "\ufffd\001\002\000\004\065\215\001\002\000\034\021\040"
        + "\032\032\033\034\034\046\035\020\037\042\041\053\043"
        + "\047\061\054\062\037\063\050\065\005\066\052\001\002"
        + "\000\022\004\ufff6\025\ufff9\026\ufff9\030\ufff9\035\ufff9\037"
        + "\ufff9\064\ufff6\065\ufff9\001\002\000\036\021\040\032\032"
        + "\033\034\034\046\035\020\037\042\041\053\043\047\061"
        + "\054\062\037\063\050\064\004\065\005\066\052\001\002"
        + "\000\004\065\167\001\002\000\016\002\uffeb\006\uffeb\012"
        + "\uffeb\015\uffeb\016\uffeb\064\uffeb\001\002\000\016\025\056"
        + "\026\063\030\060\035\061\037\042\065\055\001\002\000"
        + "\006\004\162\064\004\001\002\000\022\005\uffdf\025\ufffa"
        + "\026\ufffa\027\160\030\ufffa\035\ufffa\037\ufffa\065\ufffa\001"
        + "\002\000\004\005\031\001\002\000\034\021\040\032\032"
        + "\033\034\034\046\035\020\037\042\041\053\043\047\061"
        + "\054\062\037\063\050\065\005\066\052\001\002\000\072"
        + "\002\uffd4\004\uffd4\006\uffd4\007\uffd4\012\uffd4\014\uffd4\015"
        + "\uffd4\016\uffd4\027\uffd4\031\uffd4\036\uffd4\040\uffd4\042\uffd4"
        + "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051"
        + "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4"
        + "\060\uffd4\064\uffd4\001\002\000\006\004\ufff7\064\ufff7\001"
        + "\002\000\072\002\uffd2\004\uffd2\006\uffd2\007\uffd2\012\uffd2"
        + "\014\uffd2\015\uffd2\016\uffd2\027\uffd2\031\uffd2\036\uffd2\040"
        + "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2"
        + "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056"
        + "\uffd2\057\uffd2\060\uffd2\064\uffd2\001\002\000\072\002\uffce"
        + "\004\uffce\006\uffce\007\uffce\012\uffce\014\uffce\015\uffce\016"
        + "\uffce\027\uffce\031\uffce\036\uffce\040\uffce\042\uffce\043\uffce"
        + "\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052"
        + "\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce"
        + "\064\uffce\001\002\000\064\002\uffdd\004\uffdd\006\uffdd\007"
        + "\uffdd\012\uffdd\015\uffdd\016\uffdd\027\156\036\uffdd\042\112"
        + "\043\074\044\113\045\102\046\073\047\077\050\103\051"
        + "\107\052\106\053\076\054\111\055\105\056\100\057\075"
        + "\060\101\064\uffdd\001\002\000\034\021\uffa4\032\uffa4\033"
        + "\uffa4\034\uffa4\035\uffa4\037\uffa4\041\uffa4\043\uffa4\061\uffa4"
        + "\062\uffa4\063\uffa4\065\uffa4\066\uffa4\001\002\000\004\035"
        + "\141\001\002\000\106\002\ufff9\004\ufff9\006\ufff9\007\ufff9"
        + "\012\ufff9\014\ufff9\015\ufff9\016\ufff9\025\ufff9\026\ufff9\027"
        + "\ufff9\030\ufff9\031\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9"
        + "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050"
        + "\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9"
        + "\057\ufff9\060\ufff9\064\ufff9\065\ufff9\001\002\000\040\021"
        + "\040\030\123\032\032\033\034\034\046\035\020\037\042"
        + "\040\120\041\053\043\047\061\054\062\037\063\050\065"
        + "\121\066\052\001\002\000\034\021\040\032\032\033\034"
        + "\034\046\035\020\037\042\041\053\043\047\061\054\062"
        + "\037\063\050\065\005\066\052\001\002\000\072\002\uffcc"
        + "\004\uffcc\006\uffcc\007\uffcc\012\uffcc\014\uffcc\015\uffcc\016"
        + "\uffcc\027\uffcc\031\uffcc\036\uffcc\040\uffcc\042\uffcc\043\uffcc"
        + "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052"
        + "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc"
        + "\064\uffcc\001\002\000\106\002\uffcd\004\uffcd\006\uffcd\007"
        + "\uffcd\012\uffcd\014\uffcd\015\uffcd\016\uffcd\025\056\026\063"
        + "\027\uffcd\030\060\031\uffcd\035\061\036\uffcd\037\042\040"
        + "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd"
        + "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056"
        + "\uffcd\057\uffcd\060\uffcd\064\uffcd\065\055\001\002\000\072"
        + "\002\uffd3\004\uffd3\006\uffd3\007\uffd3\012\uffd3\014\uffd3\015"
        + "\uffd3\016\uffd3\027\uffd3\031\uffd3\036\uffd3\040\uffd3\042\uffd3"
        + "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051"
        + "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3"
        + "\060\uffd3\064\uffd3\001\002\000\034\021\uffa6\032\uffa6\033"
        + "\uffa6\034\uffa6\035\uffa6\037\uffa6\041\uffa6\043\uffa6\061\uffa6"
        + "\062\uffa6\063\uffa6\065\uffa6\066\uffa6\001\002\000\072\002"
        + "\uffd0\004\uffd0\006\uffd0\007\uffd0\012\uffd0\014\uffd0\015\uffd0"
        + "\016\uffd0\027\uffd0\031\uffd0\036\uffd0\040\uffd0\042\uffd0\043"
        + "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0"
        + "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060"
        + "\uffd0\064\uffd0\001\002\000\106\002\ufffa\004\ufffa\006\ufffa"
        + "\007\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\025\ufffa\026"
        + "\ufffa\027\ufffa\030\ufffa\031\ufffa\035\ufffa\036\ufffa\037\ufffa"
        + "\040\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047"
        + "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa"
        + "\056\ufffa\057\ufffa\060\ufffa\064\ufffa\065\ufffa\001\002\000"
        + "\072\002\uffd1\004\uffd1\006\uffd1\007\uffd1\012\uffd1\014\uffd1"
        + "\015\uffd1\016\uffd1\027\uffd1\031\uffd1\036\uffd1\040\uffd1\042"
        + "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1"
        + "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057"
        + "\uffd1\060\uffd1\064\uffd1\001\002\000\072\002\uffcf\004\uffcf"
        + "\006\uffcf\007\uffcf\012\uffcf\014\uffcf\015\uffcf\016\uffcf\027"
        + "\uffcf\031\uffcf\036\uffcf\040\uffcf\042\uffcf\043\uffcf\044\uffcf"
        + "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053"
        + "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\064\uffcf"
        + "\001\002\000\034\021\uffa5\032\uffa5\033\uffa5\034\uffa5\035"
        + "\uffa5\037\uffa5\041\uffa5\043\uffa5\061\uffa5\062\uffa5\063\uffa5"
        + "\065\uffa5\066\uffa5\001\002\000\106\002\uffc5\004\uffc5\006"
        + "\uffc5\007\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5\025\uffc5"
        + "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\035\uffc5\036\uffc5\037"
        + "\uffc5\040\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5"
        + "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055"
        + "\uffc5\056\uffc5\057\uffc5\060\uffc5\064\uffc5\065\uffc5\001\002"
        + "\000\004\065\115\001\002\000\106\002\uffc9\004\uffc9\006"
        + "\uffc9\007\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9\025\uffc9"
        + "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\035\uffc9\036\uffc9\037"
        + "\uffc9\040\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9"
        + "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055"
        + "\uffc9\056\uffc9\057\uffc9\060\uffc9\064\uffc9\065\uffc9\001\002"
        + "\000\034\021\040\032\032\033\034\034\046\035\020\037"
        + "\042\041\053\043\047\061\054\062\037\063\050\065\005"
        + "\066\052\001\002\000\036\021\040\032\032\033\034\034"
        + "\046\035\020\037\042\041\053\043\047\061\054\062\037"
        + "\063\050\064\004\065\005\066\052\001\002\000\106\002"
        + "\uffc6\004\uffc6\006\uffc6\007\uffc6\012\uffc6\014\uffc6\015\uffc6"
        + "\016\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\035"
        + "\uffc6\036\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6"
        + "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053"
        + "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\064\uffc6"
        + "\065\uffc6\001\002\000\004\065\064\001\002\000\010\035"
        + "\061\037\042\065\055\001\002\000\106\002\uffc8\004\uffc8"
        + "\006\uffc8\007\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\025"
        + "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\035\uffc8\036\uffc8"
        + "\037\uffc8\040\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046"
        + "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8"
        + "\055\uffc8\056\uffc8\057\uffc8\060\uffc8\064\uffc8\065\uffc8\001"
        + "\002\000\020\002\uffea\006\uffea\012\uffea\015\uffea\016\uffea"
        + "\036\uffea\064\uffea\001\002\000\004\036\071\001\002\000"
        + "\020\002\uffe9\006\uffe9\012\uffe9\015\uffe9\016\uffe9\036\uffe9"
        + "\064\uffe9\001\002\000\106\002\uffc7\004\uffc7\006\uffc7\007"
        + "\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7\025\uffc7\026\uffc7"
        + "\027\uffc7\030\uffc7\031\uffc7\035\uffc7\036\uffc7\037\uffc7\040"
        + "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7"
        + "\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056"
        + "\uffc7\057\uffc7\060\uffc7\064\uffc7\065\uffc7\001\002\000\042"
        + "\031\110\042\112\043\074\044\113\045\102\046\073\047"
        + "\077\050\103\051\107\052\106\053\076\054\111\055\105"
        + "\056\100\057\075\060\101\001\002\000\034\021\uffb0\032"
        + "\uffb0\033\uffb0\034\uffb0\035\uffb0\037\uffb0\041\uffb0\043\uffb0"
        + "\061\uffb0\062\uffb0\063\uffb0\065\uffb0\066\uffb0\001\002\000"
        + "\034\021\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\037\uffb4"
        + "\041\uffb4\043\uffb4\061\uffb4\062\uffb4\063\uffb4\065\uffb4\066"
        + "\uffb4\001\002\000\034\021\uffa8\032\uffa8\033\uffa8\034\uffa8"
        + "\035\uffa8\037\uffa8\041\uffa8\043\uffa8\061\uffa8\062\uffa8\063"
        + "\uffa8\065\uffa8\066\uffa8\001\002\000\034\021\uffaa\032\uffaa"
        + "\033\uffaa\034\uffaa\035\uffaa\037\uffaa\041\uffaa\043\uffaa\061"
        + "\uffaa\062\uffaa\063\uffaa\065\uffaa\066\uffaa\001\002\000\034"
        + "\021\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\037\uffb1\041"
        + "\uffb1\043\uffb1\061\uffb1\062\uffb1\063\uffb1\065\uffb1\066\uffb1"
        + "\001\002\000\034\021\uffac\032\uffac\033\uffac\034\uffac\035"
        + "\uffac\037\uffac\041\uffac\043\uffac\061\uffac\062\uffac\063\uffac"
        + "\065\uffac\066\uffac\001\002\000\034\021\uffa7\032\uffa7\033"
        + "\uffa7\034\uffa7\035\uffa7\037\uffa7\041\uffa7\043\uffa7\061\uffa7"
        + "\062\uffa7\063\uffa7\065\uffa7\066\uffa7\001\002\000\034\021"
        + "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2\041\uffb2"
        + "\043\uffb2\061\uffb2\062\uffb2\063\uffb2\065\uffb2\066\uffb2\001"
        + "\002\000\034\021\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf"
        + "\037\uffaf\041\uffaf\043\uffaf\061\uffaf\062\uffaf\063\uffaf\065"
        + "\uffaf\066\uffaf\001\002\000\034\021\040\032\032\033\034"
        + "\034\046\035\020\037\042\041\053\043\047\061\054\062"
        + "\037\063\050\065\005\066\052\001\002\000\034\021\uffae"
        + "\032\uffae\033\uffae\034\uffae\035\uffae\037\uffae\041\uffae\043"
        + "\uffae\061\uffae\062\uffae\063\uffae\065\uffae\066\uffae\001\002"
        + "\000\034\021\uffad\032\uffad\033\uffad\034\uffad\035\uffad\037"
        + "\uffad\041\uffad\043\uffad\061\uffad\062\uffad\063\uffad\065\uffad"
        + "\066\uffad\001\002\000\034\021\uffab\032\uffab\033\uffab\034"
        + "\uffab\035\uffab\037\uffab\041\uffab\043\uffab\061\uffab\062\uffab"
        + "\063\uffab\065\uffab\066\uffab\001\002\000\110\002\uffd6\004"
        + "\uffd6\005\uffd6\006\uffd6\007\uffd6\012\uffd6\014\uffd6\015\uffd6"
        + "\016\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\035"
        + "\uffd6\036\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6\044\uffd6"
        + "\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053"
        + "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\064\uffd6"
        + "\065\uffd6\001\002\000\034\021\uffa9\032\uffa9\033\uffa9\034"
        + "\uffa9\035\uffa9\037\uffa9\041\uffa9\043\uffa9\061\uffa9\062\uffa9"
        + "\063\uffa9\065\uffa9\066\uffa9\001\002\000\034\021\uffb5\032"
        + "\uffb5\033\uffb5\034\uffb5\035\uffb5\037\uffb5\041\uffb5\043\uffb5"
        + "\061\uffb5\062\uffb5\063\uffb5\065\uffb5\066\uffb5\001\002\000"
        + "\034\021\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\037\uffb3"
        + "\041\uffb3\043\uffb3\061\uffb3\062\uffb3\063\uffb3\065\uffb3\066"
        + "\uffb3\001\002\000\072\002\uffcb\004\uffcb\006\uffcb\007\uffcb"
        + "\012\uffcb\014\uffcb\015\uffcb\016\uffcb\027\uffcb\031\uffcb\036"
        + "\uffcb\040\uffcb\042\112\043\074\044\113\045\102\046\073"
        + "\047\077\050\103\051\107\052\106\053\076\054\111\055"
        + "\105\056\100\057\075\060\101\064\uffcb\001\002\000\110"
        + "\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\012\uffd5\014"
        + "\uffd5\015\uffd5\016\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5"
        + "\031\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043"
        + "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5"
        + "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060"
        + "\uffd5\064\uffd5\065\uffd5\001\002\000\072\002\uffca\004\uffca"
        + "\006\uffca\007\uffca\012\uffca\014\uffca\015\uffca\016\uffca\027"
        + "\uffca\031\uffca\036\uffca\040\uffca\042\112\043\074\044\113"
        + "\045\102\046\073\047\077\050\103\051\107\052\106\053"
        + "\076\054\111\055\105\056\100\057\075\060\101\064\uffca"
        + "\001\002\000\010\004\136\027\135\040\uffbc\001\002\000"
        + "\106\002\uffbd\004\uffbd\006\uffbd\007\uffbd\012\uffbd\014\uffbd"
        + "\015\uffbd\016\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031"
        + "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\042\uffbd\043\uffbd"
        + "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052"
        + "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd"
        + "\064\uffbd\065\uffbd\001\002\000\064\004\uffd7\005\132\025"
        + "\uffd7\026\uffd7\027\uffd7\030\uffd7\035\uffd7\037\uffd7\040\uffd7"
        + "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050"
        + "\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7"
        + "\057\uffd7\060\uffd7\065\uffd7\001\002\000\046\004\uffb8\027"
        + "\uffb8\040\uffb8\042\112\043\074\044\113\045\102\046\073"
        + "\047\077\050\103\051\107\052\106\053\076\054\111\055"
        + "\105\056\100\057\075\060\101\001\002\000\034\021\040"
        + "\032\032\033\034\034\046\035\020\037\042\041\053\043"
        + "\047\061\054\062\037\063\050\065\005\066\052\001\002"
        + "\000\004\040\125\001\002\000\106\002\uffbe\004\uffbe\006"
        + "\uffbe\007\uffbe\012\uffbe\014\uffbe\015\uffbe\016\uffbe\025\uffbe"
        + "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\035\uffbe\036\uffbe\037"
        + "\uffbe\040\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe"
        + "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055"
        + "\uffbe\056\uffbe\057\uffbe\060\uffbe\064\uffbe\065\uffbe\001\002"
        + "\000\042\031\127\042\112\043\074\044\113\045\102\046"
        + "\073\047\077\050\103\051\107\052\106\053\076\054\111"
        + "\055\105\056\100\057\075\060\101\001\002\000\004\005"
        + "\130\001\002\000\034\021\040\032\032\033\034\034\046"
        + "\035\020\037\042\041\053\043\047\061\054\062\037\063"
        + "\050\065\005\066\052\001\002\000\046\004\uffba\027\uffba"
        + "\040\uffba\042\112\043\074\044\113\045\102\046\073\047"
        + "\077\050\103\051\107\052\106\053\076\054\111\055\105"
        + "\056\100\057\075\060\101\001\002\000\034\021\040\032"
        + "\032\033\034\034\046\035\020\037\042\041\053\043\047"
        + "\061\054\062\037\063\050\065\005\066\052\001\002\000"
        + "\046\004\uffb9\027\uffb9\040\uffb9\042\112\043\074\044\113"
        + "\045\102\046\073\047\077\050\103\051\107\052\106\053"
        + "\076\054\111\055\105\056\100\057\075\060\101\001\002"
        + "\000\036\021\040\030\123\032\032\033\034\034\046\035"
        + "\020\037\042\041\053\043\047\061\054\062\037\063\050"
        + "\065\121\066\052\001\002\000\036\021\uffb7\030\uffb7\032"
        + "\uffb7\033\uffb7\034\uffb7\035\uffb7\037\uffb7\041\uffb7\043\uffb7"
        + "\061\uffb7\062\uffb7\063\uffb7\065\uffb7\066\uffb7\001\002\000"
        + "\036\021\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6"
        + "\037\uffb6\041\uffb6\043\uffb6\061\uffb6\062\uffb6\063\uffb6\065"
        + "\uffb6\066\uffb6\001\002\000\004\040\uffbb\001\002\000\072"
        + "\002\uffe8\004\uffe8\006\uffe8\007\uffe8\012\uffe8\014\uffe8\015"
        + "\uffe8\016\uffe8\027\uffe8\031\uffe8\036\uffe8\040\uffe8\042\uffe8"
        + "\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051"
        + "\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8"
        + "\060\uffe8\064\uffe8\001\002\000\010\041\146\064\004\065"
        + "\143\001\002\000\006\027\153\036\uffc1\001\002\000\012"
        + "\005\uffd9\027\uffd9\036\uffd9\064\uffd9\001\002\000\004\036"
        + "\150\001\002\000\004\036\uffc2\001\002\000\004\036\uffbf"
        + "\001\002\000\004\036\uffc3\001\002\000\032\007\013\010"
        + "\012\011\011\013\006\017\023\021\017\022\014\023\022"
        + "\024\024\035\020\064\004\065\005\001\002\000\004\006"
        + "\152\001\002\000\072\002\uffc4\004\uffc4\006\uffc4\007\uffc4"
        + "\012\uffc4\014\uffc4\015\uffc4\016\uffc4\027\uffc4\031\uffc4\036"
        + "\uffc4\040\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4"
        + "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055"
        + "\uffc4\056\uffc4\057\uffc4\060\uffc4\064\uffc4\001\002\000\006"
        + "\041\155\065\154\001\002\000\014\005\uffd8\020\uffd8\027"
        + "\uffd8\036\uffd8\064\uffd8\001\002\000\004\036\uffc0\001\002"
        + "\000\034\021\040\032\032\033\034\034\046\035\020\037"
        + "\042\041\053\043\047\061\054\062\037\063\050\065\005"
        + "\066\052\001\002\000\024\002\uffdc\004\uffdc\006\uffdc\007"
        + "\uffdc\012\uffdc\015\uffdc\016\uffdc\036\uffdc\064\uffdc\001\002"
        + "\000\006\035\020\065\005\001\002\000\004\005\uffde\001"
        + "\002\000\044\002\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3"
        + "\012\uffa3\013\uffa3\015\uffa3\016\uffa3\017\uffa3\021\uffa3\022"
        + "\uffa3\023\uffa3\024\uffa3\035\uffa3\064\uffa3\065\uffa3\001\002"
        + "\000\044\002\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012"
        + "\uffa2\013\uffa2\015\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2"
        + "\023\uffa2\024\uffa2\035\uffa2\064\uffa2\065\uffa2\001\002\000"
        + "\044\002\ufffc\006\ufffc\007\013\010\012\011\011\012\ufffc"
        + "\013\006\015\ufffc\016\ufffc\017\023\021\017\022\014\023"
        + "\ufffc\024\ufffc\035\020\064\ufffc\065\005\001\002\000\022"
        + "\002\ufffb\006\ufffb\012\ufffb\015\ufffb\016\ufffb\023\ufffb\024"
        + "\ufffb\064\ufffb\001\002\000\006\020\204\027\203\001\002"
        + "\000\010\005\170\020\uffd9\027\uffd9\001\002\000\034\021"
        + "\040\032\032\033\034\034\046\035\020\037\042\041\053"
        + "\043\047\061\054\062\037\063\050\065\005\066\052\001"
        + "\002\000\042\027\172\042\112\043\074\044\113\045\102"
        + "\046\073\047\077\050\103\051\107\052\106\053\076\054"
        + "\111\055\105\056\100\057\075\060\101\001\002\000\034"
        + "\021\040\032\032\033\034\034\046\035\020\037\042\041"
        + "\053\043\047\061\054\062\037\063\050\065\005\066\052"
        + "\001\002\000\044\027\176\042\112\043\074\044\113\045"
        + "\102\046\073\047\077\050\103\051\107\052\106\053\076"
        + "\054\111\055\105\056\100\057\075\060\101\064\004\001"
        + "\002\000\004\007\200\001\002\000\004\007\uffe0\001\002"
        + "\000\034\021\040\032\032\033\034\034\046\035\020\037"
        + "\042\041\053\043\047\061\054\062\037\063\050\065\005"
        + "\066\052\001\002\000\042\007\uffe1\042\112\043\074\044"
        + "\113\045\102\046\073\047\077\050\103\051\107\052\106"
        + "\053\076\054\111\055\105\056\100\057\075\060\101\001"
        + "\002\000\032\007\013\010\012\011\011\013\006\017\023"
        + "\021\017\022\014\023\022\024\024\035\020\064\004\065"
        + "\005\001\002\000\004\006\202\001\002\000\006\004\ufff1"
        + "\064\ufff1\001\002\000\004\065\154\001\002\000\034\021"
        + "\040\032\032\033\034\034\046\035\020\037\042\041\053"
        + "\043\047\061\054\062\037\063\050\065\005\066\052\001"
        + "\002\000\004\007\206\001\002\000\032\007\013\010\012"
        + "\011\011\013\006\017\023\021\017\022\014\023\022\024"
        + "\024\035\020\064\004\065\005\001\002\000\004\006\210"
        + "\001\002\000\006\004\ufff0\064\ufff0\001\002\000\016\002"
        + "\uffec\006\uffec\012\uffec\015\uffec\016\uffec\064\uffec\001\002"
        + "\000\042\036\213\042\112\043\074\044\113\045\102\046"
        + "\073\047\077\050\103\051\107\052\106\053\076\054\111"
        + "\055\105\056\100\057\075\060\101\001\002\000\106\002"
        + "\ufff8\004\ufff8\006\ufff8\007\ufff8\012\ufff8\014\ufff8\015\ufff8"
        + "\016\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\035"
        + "\ufff8\036\ufff8\037\ufff8\040\ufff8\042\ufff8\043\ufff8\044\ufff8"
        + "\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053"
        + "\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\064\ufff8"
        + "\065\ufff8\001\002\000\004\035\141\001\002\000\010\025"
        + "\216\026\217\035\uffe7\001\002\000\004\065\215\001\002"
        + "\000\004\065\220\001\002\000\004\035\uffe5\001\002\000"
        + "\004\035\uffe6\001\002\000\006\004\uffef\064\uffef\001\002"
        + "\000\004\002\001\001\002\000\010\005\231\027\203\064"
        + "\004\001\002\000\004\065\226\001\002\000\004\035\141"
        + "\001\002\000\006\004\uffee\064\uffee\001\002\000\006\004"
        + "\uffed\064\uffed\001\002\000\034\021\040\032\032\033\034"
        + "\034\046\035\020\037\042\041\053\043\047\061\054\062"
        + "\037\063\050\065\005\066\052\001\002\000\006\004\uffda"
        + "\064\uffda\001\002\000\006\004\uffdb\064\uffdb\001\002\000"
        + "\004\006\235\001\002\000\006\004\ufff5\064\ufff5\001\002"
        + "\000\042\007\237\042\112\043\074\044\113\045\102\046"
        + "\073\047\077\050\103\051\107\052\106\053\076\054\111"
        + "\055\105\056\100\057\075\060\101\001\002\000\032\007"
        + "\013\010\012\011\011\013\006\017\023\021\017\022\014"
        + "\023\022\024\024\035\020\064\004\065\005\001\002\000"
        + "\004\006\241\001\002\000\006\004\ufff4\064\ufff4\001\002"
        + "\000\004\012\243\001\002\000\034\021\040\032\032\033"
        + "\034\034\046\035\020\037\042\041\053\043\047\061\054"
        + "\062\037\063\050\065\005\066\052\001\002\000\044\004"
        + "\ufff3\042\112\043\074\044\113\045\102\046\073\047\077"
        + "\050\103\051\107\052\106\053\076\054\111\055\105\056"
        + "\100\057\075\060\101\064\ufff3\001\002\000\016\002\000"
        + "\006\000\012\000\015\000\016\000\064\000\001\002\000"
        + "\042\014\247\042\112\043\074\044\113\045\102\046\073"
        + "\047\077\050\103\051\107\052\106\053\076\054\111\055"
        + "\105\056\100\057\075\060\101\001\002\000\032\007\013"
        + "\010\012\011\011\013\006\017\023\021\017\022\014\023"
        + "\022\024\024\035\020\064\004\065\005\001\002\000\010"
        + "\015\254\016\253\064\004\001\002\000\004\006\uffe2\001"
        + "\002\000\004\006\262\001\002\000\032\007\013\010\012"
        + "\011\011\013\006\017\023\021\017\022\014\023\022\024"
        + "\024\035\020\064\004\065\005\001\002\000\034\021\040"
        + "\032\032\033\034\034\046\035\020\037\042\041\053\043"
        + "\047\061\054\062\037\063\050\065\005\066\052\001\002"
        + "\000\042\014\256\042\112\043\074\044\113\045\102\046"
        + "\073\047\077\050\103\051\107\052\106\053\076\054\111"
        + "\055\105\056\100\057\075\060\101\001\002\000\032\007"
        + "\013\010\012\011\011\013\006\017\023\021\017\022\014"
        + "\023\022\024\024\035\020\064\004\065\005\001\002\000"
        + "\010\015\254\016\253\064\004\001\002\000\004\006\uffe3"
        + "\001\002\000\004\006\uffe4\001\002\000\006\004\ufff2\064"
        + "\ufff2\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\260\000\024\002\014\003\007\004\024\005\025\006"
        + "\006\014\027\020\026\022\020\036\015\001\001\000\002"
        + "\001\001\000\002\001\001\000\020\004\044\010\034\020"
        + "\050\021\245\022\040\027\043\034\042\001\001\000\002"
        + "\001\001\000\004\006\244\001\001\000\024\002\241\003"
        + "\007\004\024\005\025\006\006\014\027\020\026\022\020"
        + "\036\015\001\001\000\020\004\044\010\034\020\050\021"
        + "\235\022\040\027\043\034\042\001\001\000\024\002\233"
        + "\003\007\004\024\005\025\006\006\014\027\020\026\022"
        + "\020\036\015\001\001\000\004\017\223\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\011\213\001\001\000"
        + "\020\004\044\010\034\020\050\021\211\022\040\027\043"
        + "\034\042\001\001\000\002\001\001\000\026\004\044\007"
        + "\210\010\034\015\065\020\050\021\035\022\040\027\043"
        + "\034\042\036\067\001\001\000\004\017\165\001\001\000"
        + "\002\001\001\000\006\023\056\027\061\001\001\000\006"
        + "\035\163\036\162\001\001\000\002\001\001\000\002\001"
        + "\001\000\022\004\044\010\034\015\032\020\050\021\035"
        + "\022\040\027\043\034\042\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\033\103\001\001\000\002\001\001\000\004\024\137\001"
        + "\001\000\002\001\001\000\024\004\044\010\034\020\050"
        + "\021\121\022\040\027\043\030\123\031\116\034\042\001"
        + "\001\000\020\004\044\010\034\020\050\021\115\022\040"
        + "\027\043\034\042\001\001\000\002\001\001\000\006\023"
        + "\056\027\061\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\020\004\044\010\034\020"
        + "\050\021\071\022\040\027\043\034\042\001\001\000\026"
        + "\004\044\007\066\010\034\015\065\020\050\021\035\022"
        + "\040\027\043\034\042\036\067\001\001\000\002\001\001"
        + "\000\002\001\001\000\006\023\064\027\061\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\033\103\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\020\004\044"
        + "\010\034\020\050\021\113\022\040\027\043\034\042\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\033\103\001\001\000\002\001\001"
        + "\000\004\033\103\001\001\000\004\032\133\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\033\103\001\001"
        + "\000\020\004\044\010\034\020\050\021\125\022\040\027"
        + "\043\034\042\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\033\103\001\001\000\002\001\001\000\020\004"
        + "\044\010\034\020\050\021\130\022\040\027\043\034\042"
        + "\001\001\000\004\033\103\001\001\000\020\004\044\010"
        + "\034\020\050\021\132\022\040\027\043\034\042\001\001"
        + "\000\004\033\103\001\001\000\024\004\044\010\034\020"
        + "\050\021\121\022\040\027\043\030\136\031\116\034\042"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\012\017\141\025\143\026\146"
        + "\036\144\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\024\002\150\003\007\004\024\005\025\006"
        + "\006\014\027\020\026\022\020\036\015\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\022\004\044\010\034\015\156"
        + "\020\050\021\035\022\040\027\043\034\042\001\001\000"
        + "\002\001\001\000\012\004\024\014\160\020\026\022\040"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\016\003\164\004\024\005\025\014\027\020\026"
        + "\022\020\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\020\004\044\010\034\020\050\021\170"
        + "\022\040\027\043\034\042\001\001\000\004\033\103\001"
        + "\001\000\020\004\044\010\034\020\050\021\172\022\040"
        + "\027\043\034\042\001\001\000\010\013\173\033\103\036"
        + "\174\001\001\000\002\001\001\000\002\001\001\000\020"
        + "\004\044\010\034\020\050\021\176\022\040\027\043\034"
        + "\042\001\001\000\004\033\103\001\001\000\024\002\200"
        + "\003\007\004\024\005\025\006\006\014\027\020\026\022"
        + "\020\036\015\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\022\004\044\010\034\015\204\020"
        + "\050\021\035\022\040\027\043\034\042\001\001\000\002"
        + "\001\001\000\024\002\206\003\007\004\024\005\025\006"
        + "\006\014\027\020\026\022\020\036\015\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\033"
        + "\103\001\001\000\002\001\001\000\004\024\221\001\001"
        + "\000\002\001\001\000\004\011\220\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\006\016\227\036\231\001\001\000"
        + "\002\001\001\000\004\024\226\001\001\000\002\001\001"
        + "\000\002\001\001\000\022\004\044\010\034\015\232\020"
        + "\050\021\035\022\040\027\043\034\042\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\033\103\001\001\000\024\002\237\003\007"
        + "\004\024\005\025\006\006\014\027\020\026\022\020\036"
        + "\015\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\020\004\044\010\034\020\050\021\243\022"
        + "\040\027\043\034\042\001\001\000\004\033\103\001\001"
        + "\000\002\001\001\000\004\033\103\001\001\000\024\002"
        + "\247\003\007\004\024\005\025\006\006\014\027\020\026"
        + "\022\020\036\015\001\001\000\006\012\251\036\250\001"
        + "\001\000\002\001\001\000\002\001\001\000\024\002\260"
        + "\003\007\004\024\005\025\006\006\014\027\020\026\022"
        + "\020\036\015\001\001\000\020\004\044\010\034\020\050"
        + "\021\254\022\040\027\043\034\042\001\001\000\004\033"
        + "\103\001\001\000\024\002\256\003\007\004\024\005\025"
        + "\006\006\014\027\020\026\022\020\036\015\001\001\000"
        + "\006\012\257\036\250\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    /**
     * User initialization code.
     */
    public void user_init() throws java.lang.Exception {
        //getScanner().init();
    }

    /**
     * Scan to get the next Symbol.
     */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception {
        return getScanner().next_token();
    }

    public static void main(String args[]) throws Exception {
        Parser parser = new Parser();
        parser.setScanner(new Yylex(new FileReader(args[0])));
        parser.parse();
        //new parser(new Yylex(new FileInputStream(args[0]))).parser();
        //new Parser(new Yylex(System.in)).parser();
    }

    public void syntax_error(Symbol a) {
        report_error("Error de sintaxe. Linha: " + (a.right) + "Coluna: " + a.left + ". Texto: \"" + a.value + "\"", null);
        //public static void carregar(String arquivo) throws Exception{
        //new parser(new Yylex(new FileInputStream(arquivo))).parser();
        //}
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$Parser$actions {

    private final Parser parser;

    /**
     * Constructor
     */
    CUP$Parser$actions(Parser parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$Parser$do_action(
            int CUP$Parser$act_num,
            java_cup.runtime.lr_parser CUP$Parser$parser,
            java.util.Stack CUP$Parser$stack,
            int CUP$Parser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$Parser$result;

        /* select the action based on the action number */
        switch (CUP$Parser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // empty ::= t_BLANK 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty", 28, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // optsemi ::= empty 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("optsemi", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // optsemi ::= t_SEMICOLON 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("optsemi", 27, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // unop ::= t_HASHTAG 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // unop ::= t_NOT 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // unop ::= t_MINUS 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop", 26, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // binop ::= t_OR 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // binop ::= t_AND 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // binop ::= t_GREATER_EQUAL 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // binop ::= t_GREATER_THEN 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // binop ::= t_LESS_THEN 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // binop ::= t_NOT_EQUAL 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // binop ::= t_LESS_EQUAL 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // binop ::= t_EQUAL 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // binop ::= t_DOTDOT 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // binop ::= t_EXP 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // binop ::= t_PERCENT 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // binop ::= t_DEVIDED 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // binop ::= t_TIMES 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // binop ::= t_MINUS 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // binop ::= t_PLUS 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop", 25, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // fieldsep ::= t_SEMICOLON 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // fieldsep ::= t_COMMA 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep", 24, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // field ::= exp 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("field", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // field ::= t_NAME t_ATTRIBUTION exp 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("field", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // field ::= t_BRACKET_OPEN exp t_BRACKET_CLOSE t_ATTRIBUTION exp 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("field", 23, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // fieldlist ::= field fieldsep fieldlist 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // fieldlist ::= field 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist", 22, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // tableconstructor ::= t_BRACERS_OPEN t_BRACERS_CLOSE 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // tableconstructor ::= t_BRACERS_OPEN fieldlist t_BRACERS_CLOSE 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor", 21, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // parlist ::= t_DOTDOTDOT 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // parlist ::= namelist t_COMMA t_DOTDOTDOT 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // parlist ::= namelist 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist", 20, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // optparlist ::= empty 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("optparlist", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // optparlist ::= parlist 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("optparlist", 19, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // funcbody ::= t_PARENTHESE_OPEN optparlist t_PARENTHESE_CLOSE block t_END 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcbody", 18, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // args ::= t_NAME 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("args", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // args ::= tableconstructor 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("args", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // args ::= t_PARENTHESE_OPEN optexplist t_PARENTHESE_CLOSE 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("args", 17, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // functioncall ::= prefixexp t_COLON t_NAME args 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // functioncall ::= prefixexp args 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall", 16, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // exp ::= unop exp 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // exp ::= exp binop exp 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // exp ::= tableconstructor 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // exp ::= prefixexp 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // exp ::= function 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // exp ::= t_DOTDOTDOT 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // exp ::= t_STRING 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // exp ::= t_NUMBER 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // exp ::= t_TRUE 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // exp ::= t_FALSE 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // exp ::= t_NIL 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp", 15, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // var ::= prefixexp t_DOT t_NAME 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("var", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // var ::= prefixexp t_BRACKET_OPEN exp t_BRACKET_CLOSE 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("var", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // var ::= t_NAME 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("var", 14, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // namelist ::= namelist t_COMMA t_NAME 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // namelist ::= t_NAME 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // optasmexplist ::= empty 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("optasmexplist", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // optasmexplist ::= t_ATTRIBUTION explist 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("optasmexplist", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // explist ::= exp t_COMMA explist 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // explist ::= exp 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // varlist ::= var t_COMMA varlist 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // varlist ::= var 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // optforexp ::= empty 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("optforexp", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // optforexp ::= t_COMMA exp 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("optforexp", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // optelse ::= empty 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // optelse ::= t_ELSEIF exp t_THEN block optelse 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // optelse ::= t_ELSE block 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // funcname ::= t_NAME t_COLON t_NAME 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // funcname ::= t_NAME t_DOT funcname 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // funcname ::= t_NAME 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // function ::= t_FUNCTION funcbody 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("function", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // optexplist ::= empty 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("optexplist", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // optexplist ::= explist 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("optexplist", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // laststat ::= t_BREAK 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // laststat ::= t_RETURN optexplist 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // stat ::= t_LOCAL namelist optasmexplist 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // stat ::= t_LOCAL t_FUNCTION t_NAME funcbody 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // stat ::= t_FUNCTION funcname funcbody 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // stat ::= t_FOR namelist t_IN explist t_DO block t_END 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // stat ::= t_FOR t_NAME t_ATTRIBUTION exp t_COMMA exp optforexp t_DO block t_END 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 9)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // stat ::= t_IF exp t_THEN block optelse t_END 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // stat ::= t_REPEAT block t_UNTIL exp 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // stat ::= t_WHILE exp t_DO block t_END 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // stat ::= t_DO block t_END 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // stat ::= functioncall 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // stat ::= varlist t_ATTRIBUTION explist 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // prefixexp ::= t_PARENTHESE_OPEN exp t_PARENTHESE_CLOSE 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // prefixexp ::= functioncall 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // prefixexp ::= var 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // statlist ::= stat optsemi statlist 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // statlist ::= stat optsemi 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // block ::= empty 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // block ::= laststat 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // block ::= statlist 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // block ::= statlist laststat 
            {
                Object RESULT = null;

                CUP$Parser$result = parser.getSymbolFactory().newSymbol("block", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            return CUP$Parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= block EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                RESULT = start_val;
                CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$Parser$parser.done_parsing();
            return CUP$Parser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
